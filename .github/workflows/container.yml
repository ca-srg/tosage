name: Container Build and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "Building for $GOOS/$GOARCH"
          CGO_ENABLED=0 go build -a -installsuffix cgo \
            -ldflags="-w -s" \
            -o tosage-${{ matrix.goos }}-${{ matrix.goarch }} main.go
          
          # Verify binary was created
          if [ ! -f "tosage-${{ matrix.goos }}-${{ matrix.goarch }}" ]; then
            echo "Error: Binary not created"
            exit 1
          fi
          
          echo "Binary size: $(ls -lh tosage-${{ matrix.goos }}-${{ matrix.goarch }} | awk '{print $5}')"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: tosage-${{ matrix.goos }}-${{ matrix.goarch }}
          path: tosage-${{ matrix.goos }}-${{ matrix.goarch }}
          retention-days: 1

  lint-dockerfile:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

  build-and-push:
    name: Build and Push Container
    needs: [build-binaries, lint-dockerfile]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Version tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Branch name
            type=ref,event=branch
            # SHA tag (always with sha- prefix)
            type=sha,prefix=sha-,format=short
          labels: |
            org.opencontainers.image.title=tosage
            org.opencontainers.image.description=Token usage tracking for Claude Code and Cursor
            org.opencontainers.image.vendor=CA-SRG
            org.opencontainers.image.licenses=MIT

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: ./
          pattern: tosage-*
          merge-multiple: true

      - name: Prepare binaries for Docker build
        run: |
          # Verify binaries exist
          ls -la tosage-linux-*
          chmod +x tosage-linux-*

      - name: Build and push multi-platform image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Extract SHA-based tag
        id: extract-tag
        run: |
          # Extract the SHA-based tag from metadata output
          TAGS="${{ steps.meta.outputs.tags }}"
          # Look for tags with sha- prefix (e.g., sha-a8fc84f)
          SHA_TAG=$(echo "$TAGS" | grep -E "sha-[a-f0-9]{7}" | head -n1)
          if [ -z "$SHA_TAG" ]; then
            echo "Error: Could not find SHA-based tag"
            echo "Available tags: $TAGS"
            exit 1
          fi
          echo "Found SHA tag: $SHA_TAG"
          echo "tag=$SHA_TAG" >> $GITHUB_OUTPUT

      - name: Generate image report
        if: success()
        run: |
          echo "## Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | while read tag; do
            echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

  test-container:
    name: Test Container Image
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test container
        run: |
          # Pull and run the image
          IMAGE="${{ needs.build-and-push.outputs.image-tag }}"
          
          echo "Testing image on platform: ${{ matrix.platform }}"
          docker run --rm --platform ${{ matrix.platform }} $IMAGE --help
          
          # Test CLI mode
          echo "Testing CLI mode..."
          docker run --rm --platform ${{ matrix.platform }} $IMAGE --mode cli || true
          
          # Verify image metadata
          echo "Inspecting image..."
          docker inspect $IMAGE --format='{{.Config.Labels}}' | grep -q "org.opencontainers.image.source"
          
          echo "Container test passed for ${{ matrix.platform }}"

      - name: Report test results
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Container test passed for ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Container test failed for ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          fi